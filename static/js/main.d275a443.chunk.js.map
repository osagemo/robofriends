{"version":3,"sources":["reducers.js","components/ErrorBoundry.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","ErrorBoundry","props","state","hasError","this","setState","children","Component","Card","name","email","id","className","src","alt","PureComponent","CardList","map","robot","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","connect","searchRobots","requestRobots","dispatch","onSearchChange","event","payload","target","value","onRequestRobots","fetch","then","response","json","data","catch","filteredRobots","filter","toLowerCase","includes","style","maxHeight","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oOAOMA,EAAqB,CACvBC,YAAa,IAGXC,EAAqB,CACvBC,WAAW,EACXC,OAAQ,GACRC,MAAO,I,4DCZUC,G,mBACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,UAAU,GAHC,E,iFAQfC,KAAKC,SAAS,CAAEF,UAAU,M,+BAK1B,OADqBC,KAAKF,MAAlBC,SAEG,0DAEJC,KAAKH,MAAMK,a,GAjBgBC,cCArBC,E,iLACT,IAAD,EACqBJ,KAAKH,MAAzBQ,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,GACrB,OACE,kBAAC,WAAD,KACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,UACzD,6BACE,4BAAKL,GACL,2BAAIC,U,GATkBK,iBCCnB,SAASC,EAAT,GAA+B,IAAXlB,EAAU,EAAVA,OACjC,OACE,kBAAC,WAAD,KACGA,EAAOmB,KAAI,SAAAC,GACV,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAMP,GACXA,GAAIO,EAAMP,GACVF,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,YCVV,SAASU,EAAT,GAAkD,EAA7BzB,YAA8B,IAAjB0B,EAAgB,EAAhBA,aAC/C,OACE,yBAAKT,UAAU,OACb,2BACEU,aAAW,gBACXV,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUJ,K,ICRGK,E,YACnB,WAAYzB,GAAQ,IAAD,8BACjB,4CAAMA,KAcR0B,YAAc,WACZ,EAAKtB,UAAS,SAAAH,GACZ,MAAO,CAAE0B,MAAO1B,EAAM0B,MAAQ,OAfhC,EAAK1B,MAAQ,CACX0B,MAAO,GAHQ,E,mFAOGC,EAAWC,GAC/B,OAAI1B,KAAKF,MAAM0B,QAAUE,EAAUF,Q,+BAanC,OACE,6BACE,4BAAQG,MAAO3B,KAAKH,MAAM8B,MAAOC,QAAS5B,KAAKuB,aAA/C,UACUvB,KAAKF,MAAM0B,Y,GAzBcrB,aCAtB0B,E,iLAKjB,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAeF,MAAM,QACrB,wBAAInB,UAAU,MAAd,oB,GAR4BG,iBCqBrBmB,G,OAAAA,aAZS,SAAAhC,GAAK,MAAK,CAChCP,YAAaO,EAAMiC,aAAaxC,YAChCG,OAAQI,EAAMkC,cAActC,OAC5BD,UAAWK,EAAMkC,cAAcvC,UAC/BE,MAAOG,EAAMkC,cAAcrC,UAGF,SAAAsC,GAAQ,MAAK,CACtCC,eAAgB,SAAAC,GAAK,OAAIF,ECZY,CACnCd,KCR+B,sBDS/BiB,QDU+CD,EAAME,OAAOC,SAC9DC,gBAAiB,kBAAMN,GCRQ,SAAAA,GAC7BA,EAAS,CAAEd,KCZuB,2BDalCqB,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GAAI,OAAIX,EAAS,CAAEd,KChBK,yBDgByBiB,QAASQ,OAC/DC,OAAM,SAAAlD,GAAK,OACRsC,EAAS,CAAEd,KCjBc,wBDiBeiB,QAASzC,cDG9CmC,CAAA,4LAMT9B,KAAKH,MAAM0C,oBANF,+BASD,IAAD,EACoDvC,KAAKH,MAAxDN,EADD,EACCA,YAAa2C,EADd,EACcA,eAAgBxC,EAD9B,EAC8BA,OAAQD,EADtC,EACsCA,UAEvCqD,EAAiBpD,EAAOqD,QAAO,SAAAjC,GACnC,OAAOA,EAAMT,KAAK2C,cAAcC,SAAS1D,MAG3C,OAAIE,EACK,iDAIP,yBAAKe,UAAU,MACb,kBAAC,EAAD,MACA,kBAACQ,EAAD,CAAWC,aAAciB,IACzB,kBAAC,IAAD,CAAWgB,MAAO,CAAEC,UAAW,SAC7B,kBAAC,EAAD,KACE,kBAACvC,EAAD,CAAUlB,OAAQoD,WA1BjB,GAIKM,IAAMjD,aGfpBkD,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTnB,MAAK,SAAAwB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrE,QACfgE,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BpB,OAAM,SAAAlD,GACL4E,QAAQ5E,MAAM,4CAA6CA,MC5EjE,IAAMgF,EAAcC,YAAgB,CAAE7C,aXHV,WAA8C,IAA7CjC,EAA4C,uDAApCR,EAAoBuF,EAAgB,uDAAP,GAC9D,OAAQA,EAAO1D,MACX,ISnB2B,sBToBvB,OAAO2D,OAAOC,OAAO,GAAIjF,EAAO,CAAEP,YAAasF,EAAOzC,UAC1D,QACI,OAAOtC,IWFiCkC,cXMvB,WAA8C,IAA7ClC,EAA4C,uDAApCN,EAAoBqF,EAAgB,uDAAP,GAC/D,OAAQA,EAAO1D,MACX,IS3B8B,yBT4B1B,OAAO2D,OAAOC,OAAO,GAAIjF,EAAO,CAAEL,WAAW,IACjD,IS5B8B,yBT8B1B,OAAO,eAAKK,EAAZ,CAAmBJ,OAAQmF,EAAOzC,QAAS3C,WAAW,IAC1D,IS9B6B,wBT+BzB,OAAO,eAAKK,EAAZ,CAAmBH,MAAOkF,EAAOzC,QAAS3C,WAAW,IACzD,QACI,OAAOK,MWdbkF,EAAQC,YACZN,EACAO,YAAgBC,MAGlBC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDTnB,SAAkB1B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,eAAwBlC,OAAOC,SAASkC,MACpDC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,QAAQ,WAC9B,IAAMhC,EAAK,UAAM6B,eAAN,sBAEPpC,IAgEV,SAAiCO,EAAOC,GAEtCrB,MAAMoB,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5BpD,MAAK,SAAAC,GAEJ,IAAMoD,EAAcpD,EAASmD,QAAQE,IAAI,gBAEnB,MAApBrD,EAASsD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CnC,UAAUC,cAAcmC,MAAMzD,MAAK,SAAAwB,GACjCA,EAAakC,aAAa1D,MAAK,WAC7Bc,OAAOC,SAAS4C,eAKpBzC,EAAgBC,EAAOC,MAG1BhB,OAAM,WACL0B,QAAQC,IACN,oEAvFA6B,CAAwBzC,EAAOC,GAI/BC,UAAUC,cAAcmC,MAAMzD,MAAK,WACjC8B,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCb/BE,I","file":"static/js/main.d275a443.chunk.js","sourcesContent":["import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS\r\n} from \"./constants.js\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: \"\"\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            // Using spread operator instead\r\n            return { ...state, robots: action.payload, isPending: false };\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, error: action.payload, isPending: false };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        const { hasError } = this.state;\r\n        if (hasError) {\r\n            return <h1>Oops, something went wrong</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n","import React, { PureComponent, Fragment } from \"react\";\r\n\r\nexport default class Card extends PureComponent {\r\n  render() {\r\n    const { name, email, id } = this.props;\r\n    return (\r\n      <Fragment>\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n          <img src={`https://robohash.org/${id}?size=200x200`} alt=\"Robot\" />\r\n          <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nexport default function CardList({ robots }) {\r\n  return (\r\n    <Fragment>\r\n      {robots.map(robot => {\r\n        return (\r\n          <Card\r\n            key={robot.id}\r\n            id={robot.id}\r\n            name={robot.name}\r\n            email={robot.email}\r\n          />\r\n        );\r\n      })}\r\n    </Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function SearchBox({ searchField, searchChange }) {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        aria-label=\"Search robots\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class CounterButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: 0\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(state => {\r\n      return { count: state.count + 1 };\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button color={this.props.color} onClick={this.updateCount}>\r\n          Count: {this.state.count}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent, Fragment } from \"react\";\r\nimport CounterButton from \"./CounterButton\";\r\nexport default class Header extends PureComponent {\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   return false;\r\n  // }\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <CounterButton color=\"red\" />\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { setSearchField, fetchRobots } from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport \"simplebar/dist/simplebar.min.css\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Header from \"../components/Header\";\r\nimport \"./App.css\";\r\n\r\nconst mapStateToProps = state => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n  onRequestRobots: () => dispatch(fetchRobots())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  class App extends React.Component {\r\n    componentDidMount() {\r\n      this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n      const { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n      const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField);\r\n      });\r\n\r\n      if (isPending) {\r\n        return <h1>Fetching users...</h1>;\r\n      }\r\n\r\n      return (\r\n        <div className=\"tc\">\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <SimpleBar style={{ maxHeight: \"75vh\" }}>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </SimpleBar>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS\r\n} from \"./constants.js\";\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const fetchRobots = () => dispatch => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error =>\r\n            dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n        );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n// import { createLogger } from \"redux-logger\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\nimport \"tachyons\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nif (process.env.NODE_ENV === \"development\") {\r\n  // Special import because using ES6 Classes\r\n  const whyDidYouRender = require(\"@welldone-software/why-did-you-render/dist/no-classes-transpile/umd/whyDidYouRender.min.js\");\r\n  whyDidYouRender(React, {\r\n    trackAllPureComponents: true\r\n  });\r\n}\r\n\r\n// const logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware) //, logger)\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}